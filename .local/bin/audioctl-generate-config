#!/usr/bin/dash
# vim: nomodeline

scontrol_priority() {
  case "$1" in
    [pc]volume|[pc]switch)
      echo 0
      ;;
    [pc]volume-joined|[pc]switch-joined)
      echo 2
      ;;
    volume|switch)
      echo 3
      ;;
    volume-joined|switch-joined)
      echo 4
      ;;
  esac
}

prefer_name() {
  for name in Master Capture Speaker PCM; do
    case "$1$2" in
      *"$name"*)
        ;;
      *)
        continue
        ;;
    esac

    case "$1" in
      *"$name"*)
        if [ "${#1}" -lt "${#2}" ]; then
          return 0
        fi
        ;;
      *)
        ;;
    esac

    case "$2" in
      *"$name"*)
        return 1
        ;;
      *)
        ;;
    esac
  done
  return 1
}

prefer_scontrol() {
  if [ -z "$2" ]; then
    return 0
  fi
  if [ -z "$1" ]; then
    return 1
  fi
  local lprio="$(scontrol_priority "$1")" rprio="$(scontrol_priority "$2")"
  if [ "$lprio" -eq "$rprio" ]; then
    prefer_name "$3" "$4"
    return "$?"
  fi
  [ "$lprio" -lt "$rprio" ]
}

scontrol_fold_capability() {
  if [ -z "$2" ]; then
    return 0
  fi
  [ "$(scontrol_priority "$1")" -gt "$(scontrol_priority "$2")" ]
}

strip_leading_and_trailing_space() {
  local arg="$1"
  while :; do
    case "$arg" in
      " "*)
        arg=${arg# }
        ;;
      *" ")
        arg=${arg% }
        ;;
      *)
        break
        ;;
    esac
  done
  printf "%s" "$arg"
}

parse_capabilities() {
  line="$(strip_leading_and_trailing_space "$1") "

  local this_pvolume_cap this_pswitch_cap
  local this_cvolume_cap this_cswitch_cap

  while [ "${#line}" -ne 0 ]; do
    local cap="${line%% *}"
    line=${line#* }
    case "$cap" in
      pvolume|pvolume-joined)
        if scontrol_fold_capability "$cap" "$this_pvolume_cap"; then
          this_pvolume_cap="$cap"
        fi
        ;;
      pswitch|pswitch-joined)
        if scontrol_fold_capability "$cap" "$this_pswitch_cap"; then
          this_pswitch_cap="$cap"
        fi
        ;;
      cvolume|cvolume-joined)
        if scontrol_fold_capability "$cap" "$this_cvolume_cap"; then
          this_cvolume_cap="$cap"
        fi
        ;;
      cswitch|cswitch-joined)
        if scontrol_fold_capability "$cap" "$this_cswitch_cap"; then
          this_cswitch_cap="$cap"
        fi
        ;;
      volume|volume-joined)
        if scontrol_fold_capability "$cap" "$this_pvolume_cap"; then
          this_pvolume_cap="$cap"
        fi
        if scontrol_fold_capability "$cap" "$this_cvolume_cap"; then
          this_cvolume_cap="$cap"
        fi
        ;;
      switch|switch-joined)
        if scontrol_fold_capability "$cap" "$this_pswitch_cap"; then
          this_pswitch_cap="$cap"
        fi
        if scontrol_fold_capability "$cap" "$this_cswitch_cap"; then
          this_cswitch_cap="$cap"
        fi
        ;;
    esac
  done

  if prefer_scontrol "$this_pvolume_cap" "$pvolume_cap" \
    "$scontrol_name" "$pvolume"; then
    pvolume_cap="$this_pvolume_cap"
    pvolume="$scontrol_name"
  fi
  if prefer_scontrol "$this_pswitch_cap" "$pswitch_cap" \
    "$scontrol_name" "$pswitch"; then
    pswitch_cap="$this_pswitch_cap"
    pswitch="$scontrol_name"
  fi
  if prefer_scontrol "$this_cvolume_cap" "$cvolume_cap" \
    "$scontrol_name" "$cvolume"; then
    cvolume_cap="$this_cvolume_cap"
    cvolume="$scontrol_name"
  fi
  if prefer_scontrol "$this_cswitch_cap" "$cswitch_cap" \
    "$scontrol_name" "$cswitch"; then
    cswitch_cap="$this_cswitch_cap"
    cswitch="$scontrol_name"
  fi
}

parse_and_set_config() {
  local pvolume pswitch cvolume cswitch
  local pvolume_cap pswitch_cap cvolume_cap cswitch_cap
  local scontrol_name=
  while IFS= read -r line; do
    case "$line" in
      "Simple mixer control"*)
        scontrol_name=$(strip_leading_and_trailing_space "${line#Simple mixer control}")
        ;;
      "  Capabilities:"*)
        parse_capabilities "${line#  Capabilities: }"
        ;;
    esac
  done

  printf "PVOLUME=%s\n" "$pvolume"
  printf "PSWITCH=%s\n" "$pswitch"
  printf "CVOLUME=%s\n" "$cvolume"
  printf "CSWITCH=%s\n" "$cswitch"
  printf "# vim: ft=sh\n"
}

amixer scontents | parse_and_set_config
